/* Generated by JSIL v0.7.8 build 17777. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm03 = JSIL.DeclareAssembly("Microsoft.Xna.Framework.Game, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
/* interface Microsoft.Xna.Framework.IGameComponent */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IGameComponent", true, [], function ($) {
    $.Method({}, "Initialize", new JSIL.MethodSignature(null, [], []));
  }, []);

/* interface Microsoft.Xna.Framework.IUpdateable */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IUpdateable", true, [], function ($) {
    $.Method({}, "get_Enabled", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_UpdateOrder", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "add_EnabledChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "remove_EnabledChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "add_UpdateOrderChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "remove_UpdateOrderChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "Update", new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], []));
    $.Property({}, "Enabled");
    $.Property({}, "UpdateOrder");
  }, []);

/* class Microsoft.Xna.Framework.GameComponent */ 

(function GameComponent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.Game")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_EnabledChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_UpdateOrderChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Enabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Game", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.Game"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdateOrder", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEnabledChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnUpdateOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_EnabledChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_UpdateOrderChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateOrder", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], [])
    );

    $.Field({Static:false, Public:false}, "enabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "updateOrder", $.Int32); 
    $.Field({Static:false, Public:false}, "game", $asm03.TypeRef("Microsoft.Xna.Framework.Game")); 
    $.Field({Static:false, Public:false}, "EnabledChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "UpdateOrderChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Enabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateOrder", $.Int32);

    $.Property({Static:false, Public:true }, "Game", $asm03.TypeRef("Microsoft.Xna.Framework.Game"));

    $.Event({Static:false, Public:true , Virtual:true }, "EnabledChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "UpdateOrderChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent"), 
      /* 1 */ $asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable"), 
      /* 2 */ $asm07.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Xna.Framework.IDrawable */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IDrawable", true, [], function ($) {
    $.Method({}, "get_Visible", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_DrawOrder", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "add_VisibleChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "remove_VisibleChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "add_DrawOrderChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "remove_DrawOrderChanged", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], []));
    $.Method({}, "Draw", new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], []));
    $.Property({}, "Visible");
    $.Property({}, "DrawOrder");
  }, []);

/* class Microsoft.Xna.Framework.DrawableGameComponent */ 

(function DrawableGameComponent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Xna.Framework.GameComponent"), 
      Name: "Microsoft.Xna.Framework.DrawableGameComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.Game")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_DrawOrderChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_VisibleChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceCreated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceReset", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceResetting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DrawOrder", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsDevice", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDrawOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnVisibleChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_DrawOrderChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_VisibleChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DrawOrder", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "initialized", $.Boolean); 
    $.Field({Static:false, Public:false}, "visible", $.Boolean); 
    $.Field({Static:false, Public:false}, "drawOrder", $.Int32); 
    $.Field({Static:false, Public:false}, "deviceService", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService")); 
    $.Field({Static:false, Public:false}, "VisibleChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DrawOrderChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DrawOrder", $.Int32);

    $.Property({Static:false, Public:true }, "GraphicsDevice", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Event({Static:false, Public:true , Virtual:true }, "VisibleChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DrawOrderChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("Microsoft.Xna.Framework.IDrawable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs */ 

(function PreparingDeviceSettingsEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsDeviceInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"), [], [])
    );

    $.Field({Static:false, Public:false}, "graphicsDeviceInformation", $asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")); 
    $.Property({Static:false, Public:true }, "GraphicsDeviceInformation", $asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Game */ 

(function Game$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Game", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Exiting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDraw", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginRun", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceCreated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceReset", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceResetting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array") /* AnyType[] */ ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array") /* AnyType[] */ ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DrawableDrawOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DrawFrame", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndDraw", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndRun", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureHost", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exit", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameComponentAdded", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameComponentRemoved", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Components", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Content", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsDevice", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InactiveSleepTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsActive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsActiveIgnoringGuide", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFixedTimeStep", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMouseVisible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LaunchParameters", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.LaunchParameters"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Services", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GameServiceContainer"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ShouldExit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetElapsedTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Window", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HookDeviceEvents", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostActivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostDeactivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostExiting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostIdle", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostResume", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HostSuspend", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnActivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeactivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnExiting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false}, "Paint", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Exiting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetElapsedTime", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Run", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunGame", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RunOneFrame", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Content", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InactiveSleepTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFixedTimeStep", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsMouseVisible", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetElapsedTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShowMissingRequirementMessage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartGameLoop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SuppressDraw", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Tick", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhookDeviceEvents", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateableUpdateOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumElapsedTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "graphicsDeviceManager", $asm03.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "graphicsDeviceService", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService")); 
    $.Field({Static:false, Public:false}, "host", $asm03.TypeRef("Microsoft.Xna.Framework.GameHost")); 
    $.Field({Static:false, Public:false}, "isActive", $.Boolean); 
    $.Field({Static:false, Public:false}, "exitRequested", $.Boolean); 
    $.Field({Static:false, Public:false}, "inactiveSleepTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "isMouseVisible", $.Boolean); 
    $.Field({Static:false, Public:false}, "inRun", $.Boolean); 
    $.Field({Static:false, Public:false}, "endRunRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "gameTime", $asm03.TypeRef("Microsoft.Xna.Framework.GameTime")); 
    $.Field({Static:false, Public:false}, "clock", $asm02.TypeRef("Microsoft.Xna.Framework.GameClock")); 
    $.Field({Static:false, Public:false}, "totalGameTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "targetElapsedTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "accumulatedElapsedGameTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "lastFrameElapsedGameTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "isFixedTimeStep", $.Boolean); 
    $.Field({Static:false, Public:false}, "drawRunningSlowly", $.Boolean); 
    $.Field({Static:false, Public:false}, "updatesSinceRunningSlowly1", $.Int32); 
    $.Field({Static:false, Public:false}, "updatesSinceRunningSlowly2", $.Int32); 
    $.Field({Static:false, Public:false}, "doneFirstUpdate", $.Boolean); 
    $.Field({Static:false, Public:false}, "doneFirstDraw", $.Boolean); 
    $.Field({Static:false, Public:false}, "forceElapsedTimeToZero", $.Boolean); 
    $.Field({Static:false, Public:false}, "suppressDraw", $.Boolean); 
    $.Field({Static:false, Public:false}, "gameComponents", $asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollection")); 
    $.Field({Static:false, Public:false}, "updateableComponents", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable")])); 
    $.Field({Static:false, Public:false}, "currentlyUpdatingComponents", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable")])); 
    $.Field({Static:false, Public:false}, "drawableComponents", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IDrawable")])); 
    $.Field({Static:false, Public:false}, "currentlyDrawingComponents", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IDrawable")])); 
    $.Field({Static:false, Public:false}, "notYetInitialized", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")])); 
    $.Field({Static:false, Public:false}, "gameServices", $asm03.TypeRef("Microsoft.Xna.Framework.GameServiceContainer")); 
    $.Field({Static:false, Public:false}, "content", $asm02.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "launchParameters", $asm03.TypeRef("Microsoft.Xna.Framework.LaunchParameters")); 
    $.Field({Static:false, Public:false}, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Exiting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "LaunchParameters", $asm03.TypeRef("Microsoft.Xna.Framework.LaunchParameters"));

    $.Property({Static:false, Public:true }, "Components", $asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollection"));

    $.Property({Static:false, Public:true }, "Services", $asm03.TypeRef("Microsoft.Xna.Framework.GameServiceContainer"));

    $.Property({Static:false, Public:true }, "InactiveSleepTime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsMouseVisible", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetElapsedTime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsFixedTimeStep", $.Boolean);

    $.Property({Static:false, Public:true }, "Window", $asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"));

    $.Property({Static:false, Public:true }, "IsActive", $.Boolean);

    $.Property({Static:false, Public:true }, "GraphicsDevice", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:false, Public:true }, "Content", $asm02.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:false}, "IsActiveIgnoringGuide", $.Boolean);

    $.Property({Static:false, Public:false}, "ShouldExit", $.Boolean);

    $.Event({Static:false, Public:true }, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Exiting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameComponentCollectionEventArgs */ 

(function GameComponentCollectionEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.GameComponentCollectionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GameComponent", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent"), [], [])
    );

    $.Field({Static:false, Public:false}, "gameComponent", $asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")); 
    $.Property({Static:false, Public:true }, "GameComponent", $asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameComponentCollection */ 

(function GameComponentCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")]), 
      Name: "Microsoft.Xna.Framework.GameComponentCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ComponentAdded", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ComponentRemoved", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearItems", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnComponentAdded", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnComponentRemoved", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ComponentAdded", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ComponentRemoved", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("Microsoft.Xna.Framework.IGameComponent")], [])
    );

    $.Field({Static:false, Public:false}, "ComponentAdded", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])); 
    $.Field({Static:false, Public:false}, "ComponentRemoved", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])); 
    $.Event({Static:false, Public:true }, "ComponentAdded", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]));

    $.Event({Static:false, Public:true }, "ComponentRemoved", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameHost */ 

(function GameHost$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameHost", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Exiting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Idle", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Resume", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Suspend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Exit", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Window", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnActivated", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeactivated", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnExiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnIdle", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnResume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSuspend", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Exiting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Idle", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Resume", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Suspend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RunOneFrame", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShowMissingRequirementMessage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartGameLoop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "Suspend", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Resume", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Idle", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Exiting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "Window", $asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"));

    $.Event({Static:false, Public:false}, "Suspend", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Resume", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Idle", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Exiting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.GamerServices");
/* class Microsoft.Xna.Framework.GamerServices.GamerServicesComponent */ 

(function GamerServicesComponent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Xna.Framework.GameComponent"), 
      Name: "Microsoft.Xna.Framework.GamerServices.GamerServicesComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.Game")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GamerServicesDispatcher_InstallingTitleUpdate", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GameTime")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameServiceContainer */ 

(function GameServiceContainer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameServiceContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddService", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetService", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveService", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "services", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Object])); 
    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IServiceProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameTime */ 

(function GameTime$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameTime", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.TimeSpan"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElapsedGameTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRunningSlowly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalGameTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElapsedGameTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRunningSlowly", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TotalGameTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:false, Public:false}, "totalGameTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "elapsedGameTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "isRunningSlowly", $.Boolean); 
    $.Property({Static:false, Public:true }, "TotalGameTime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ElapsedGameTime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsRunningSlowly", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameWindow */ 

(function GameWindow$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameWindow", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ClientSizeChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_OrientationChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Paint", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ScreenDeviceNameChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginScreenDeviceChange", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndScreenDeviceChange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndScreenDeviceChange", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AllowUserResizing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClientBounds", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentOrientation", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Handle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsMinimized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsMouseVisible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ScreenDeviceName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Title", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnActivated", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnClientSizeChanged", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeactivated", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnOrientationChanged", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnPaint", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnScreenDeviceNameChanged", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Activated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ClientSizeChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Deactivated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_OrientationChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Paint", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ScreenDeviceNameChanged", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AllowUserResizing", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsMouseVisible", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Title", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetSupportedOrientations", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetTitle", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultClientWidth", $.Int32, 800); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultClientHeight", $.Int32, 600); 
    $.Field({Static:false, Public:false}, "title", $.String); 
    $.Field({Static:false, Public:false}, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Paint", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "ScreenDeviceNameChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "ClientSizeChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "OrientationChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "Title", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $asm07.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true , Virtual:true }, "AllowUserResizing", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsMouseVisible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsMinimized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ClientBounds", $asm02.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "ScreenDeviceName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentOrientation", $asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Event({Static:false, Public:false}, "Activated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Deactivated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Paint", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "ScreenDeviceNameChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "ClientSizeChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "OrientationChanged", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GraphicsDeviceInformation */ 

(function GraphicsDeviceInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GraphicsDeviceInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Adapter", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsProfile", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PresentationParameters", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Adapter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GraphicsProfile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PresentationParameters", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")], [])
    );

    $.Field({Static:false, Public:false}, "presentationParameters", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")); 
    $.Field({Static:false, Public:false}, "adapter", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")); 
    $.Field({Static:false, Public:false}, "graphicsProfile", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")); 
    $.Property({Static:false, Public:true }, "Adapter", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"));

    $.Property({Static:false, Public:true }, "GraphicsProfile", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"));

    $.Property({Static:false, Public:true }, "PresentationParameters", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GraphicsDeviceInformationComparer */ 

(function GraphicsDeviceInformationComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GraphicsDeviceInformationComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"), $asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RankFormat", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SurfaceFormatBitDepth", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")], [])
    );

    $.Field({Static:false, Public:false}, "graphics", $asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Xna.Framework.IGraphicsDeviceManager */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IGraphicsDeviceManager", true, [], function ($) {
    $.Method({}, "CreateDevice", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "BeginDraw", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "EndDraw", new JSIL.MethodSignature(null, [], []));
  }, []);

/* class Microsoft.Xna.Framework.GraphicsDeviceManager */ 

(function GraphicsDeviceManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GraphicsDeviceManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.Game")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_DeviceCreated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_DeviceDisposing", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_DeviceReset", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_DeviceResetting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_PreparingDeviceSettings", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDevices", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDevices", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"), $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode"), 
          $asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyChanges", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanResetDevice", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeDevice", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigureTouchInput", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDevice", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDevice", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDevicePlatform", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindBestDevice", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindBestPlatformDevice", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowClientSizeChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowOrientationChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowScreenDeviceNameChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_GraphicsDevice", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsProfile", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFullScreen", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferMultiSampling", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredBackBufferFormat", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredBackBufferHeight", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredBackBufferWidth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredDepthStencilFormat", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportedOrientations", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SynchronizeWithVerticalRetrace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDeviceLost", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDeviceReset", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDeviceResetting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWindowOnAdapter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IntPtr"), $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MassagePresentParameters", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "BeginDraw");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "CreateDevice");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "EndDraw");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeviceCreated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeviceDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeviceReset", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeviceResetting", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPreparingDeviceSettings", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Security", "CA2109:ReviewVisibleEventHandlers"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RankDevices", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RankDevicesPlatform", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDefaultGraphicsProfile", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_DeviceCreated", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_DeviceDisposing", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_DeviceReset", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_DeviceResetting", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_PreparingDeviceSettings", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GraphicsProfile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFullScreen", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferMultiSampling", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferredBackBufferFormat", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferredBackBufferHeight", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferredBackBufferWidth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferredDepthStencilFormat", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportedOrientations", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SynchronizeWithVerticalRetrace", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Dispose");

    $.ExternalMethod({Static:false, Public:true }, "ToggleFullScreen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateGraphicsDeviceInformation", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultBackBufferWidth", $.Int32, 800); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultBackBufferHeight", $.Int32, 480); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "deviceLostSleepTime", $asm07.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "game", $asm03.TypeRef("Microsoft.Xna.Framework.Game")); 
    $.Field({Static:false, Public:false}, "isReallyFullScreen", $.Boolean); 
    $.Field({Static:false, Public:false}, "isDeviceDirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "inDeviceTransition", $.Boolean); 
    $.Field({Static:false, Public:false}, "device", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "synchronizeWithVerticalRetrace", $.Boolean); 
    $.Field({Static:false, Public:false}, "isFullScreen", $.Boolean); 
    $.Field({Static:false, Public:false}, "graphicsProfile", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")); 
    $.Field({Static:false, Public:false}, "backBufferFormat", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")); 
    $.Field({Static:false, Public:false}, "depthStencilFormat", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")); 
    $.Field({Static:false, Public:false}, "backBufferWidth", $.Int32); 
    $.Field({Static:false, Public:false}, "backBufferHeight", $.Int32); 
    $.Field({Static:false, Public:false}, "allowMultiSampling", $.Boolean); 
    $.Field({Static:false, Public:false}, "supportedOrientations", $asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")); 
    $.Field({Static:false, Public:false}, "currentWindowOrientation", $asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")); 
    $.Field({Static:false, Public:false}, "resizedBackBufferWidth", $.Int32); 
    $.Field({Static:false, Public:false}, "resizedBackBufferHeight", $.Int32); 
    $.Field({Static:false, Public:false}, "useResizedBackBuffer", $.Boolean); 
    $.Field({Static:false, Public:false}, "deviceCreated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "deviceResetting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "deviceReset", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "deviceDisposing", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "PreparingDeviceSettings", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])); 
    $.Field({Static:false, Public:false}, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "beginDrawOk", $.Boolean); 
    function GraphicsDeviceManager__cctor () {
      $thisType.deviceLostSleepTime = new $asm07.System.TimeSpan();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      GraphicsDeviceManager__cctor
    );

    $.Property({Static:false, Public:true }, "GraphicsProfile", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"));

    $.Property({Static:false, Public:true }, "PreferredDepthStencilFormat", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"));

    $.Property({Static:false, Public:true }, "PreferredBackBufferFormat", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "PreferredBackBufferWidth", $.Int32);

    $.Property({Static:false, Public:true }, "PreferredBackBufferHeight", $.Int32);

    $.Property({Static:false, Public:true }, "IsFullScreen", $.Boolean);

    $.Property({Static:false, Public:true }, "SynchronizeWithVerticalRetrace", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferMultiSampling", $.Boolean);

    $.Property({Static:false, Public:true }, "SupportedOrientations", $asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true , Virtual:true }, "GraphicsDevice", $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceCreated", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceResetting", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceReset", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceDisposing", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "PreparingDeviceSettings", $asm07.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")]));

    $.Event({Static:false, Public:true }, "Disposed", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm03.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.DrawOrderComparer */ 

(function DrawOrderComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.DrawOrderComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm03.TypeRef("Microsoft.Xna.Framework.IDrawable")], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IDrawable")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.UpdateOrderComparer */ 

(function UpdateOrderComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.UpdateOrderComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable")], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("Microsoft.Xna.Framework.IUpdateable")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.LaunchParameters */ 

(function LaunchParameters$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]), 
      Name: "Microsoft.Xna.Framework.LaunchParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCommandLineArguments", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseKeyValuePair", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Resources */ 

(function Resources$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Resources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_BackBufferDimMustBePositive", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotAddSameComponentMultipleTimes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotCreateGameType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotSetItemsIntoGameComponentCollection", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultTitleName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Direct3DCreateError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Direct3DInvalidCreateParameters", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GameCannotBeNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GameNotDerivedFromValidGameType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GraphicsComponentNotAttachedToGame", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GraphicsDeviceManagerAlreadyPresent", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InactiveSleepTimeCannotBeZero", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidScreenAdapter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidScreenDeviceName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MissingGraphicsDeviceService", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustCallBeginDeviceChange", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoAudioHardware", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoCompatibleDevices", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoCompatibleDevicesAfterRanking", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoGraphicsDeviceService", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoHighResolutionTimer", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMultipleRuns", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoNullUseDefaultAdapter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoSuitableGraphicsDevice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullOrEmptyScreenDeviceName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PreviousDrawThrew", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyCannotBeCalledBeforeInitialize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RunNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceAlreadyPresent", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceMustBeAssignable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceProviderCannotBeNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceTypeCannotBeNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TargetElaspedCannotBeZero", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TitleCannotBeNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValidateBackBufferDimsFullScreen", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValidateBackBufferDimsModeFullScreen", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm07.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm08.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm08.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm08.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm08.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "BackBufferDimMustBePositive", $.String);

    $.Property({Static:true , Public:false}, "CannotAddSameComponentMultipleTimes", $.String);

    $.Property({Static:true , Public:false}, "CannotSetItemsIntoGameComponentCollection", $.String);

    $.Property({Static:true , Public:false}, "DefaultTitleName", $.String);

    $.Property({Static:true , Public:false}, "Direct3DCreateError", $.String);

    $.Property({Static:true , Public:false}, "Direct3DInvalidCreateParameters", $.String);

    $.Property({Static:true , Public:false}, "GameCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "GameNotDerivedFromValidGameType", $.String);

    $.Property({Static:true , Public:false}, "CannotCreateGameType", $.String);

    $.Property({Static:true , Public:false}, "RunNotSupported", $.String);

    $.Property({Static:true , Public:false}, "GraphicsComponentNotAttachedToGame", $.String);

    $.Property({Static:true , Public:false}, "GraphicsDeviceManagerAlreadyPresent", $.String);

    $.Property({Static:true , Public:false}, "InactiveSleepTimeCannotBeZero", $.String);

    $.Property({Static:true , Public:false}, "InvalidScreenAdapter", $.String);

    $.Property({Static:true , Public:false}, "InvalidScreenDeviceName", $.String);

    $.Property({Static:true , Public:false}, "MissingGraphicsDeviceService", $.String);

    $.Property({Static:true , Public:false}, "MustCallBeginDeviceChange", $.String);

    $.Property({Static:true , Public:false}, "NoAudioHardware", $.String);

    $.Property({Static:true , Public:false}, "NoCompatibleDevices", $.String);

    $.Property({Static:true , Public:false}, "NoCompatibleDevicesAfterRanking", $.String);

    $.Property({Static:true , Public:false}, "NoGraphicsDeviceService", $.String);

    $.Property({Static:true , Public:false}, "NoHighResolutionTimer", $.String);

    $.Property({Static:true , Public:false}, "NoMultipleRuns", $.String);

    $.Property({Static:true , Public:false}, "NoNullUseDefaultAdapter", $.String);

    $.Property({Static:true , Public:false}, "NoSuitableGraphicsDevice", $.String);

    $.Property({Static:true , Public:false}, "NullOrEmptyScreenDeviceName", $.String);

    $.Property({Static:true , Public:false}, "PreviousDrawThrew", $.String);

    $.Property({Static:true , Public:false}, "PropertyCannotBeCalledBeforeInitialize", $.String);

    $.Property({Static:true , Public:false}, "ServiceAlreadyPresent", $.String);

    $.Property({Static:true , Public:false}, "ServiceMustBeAssignable", $.String);

    $.Property({Static:true , Public:false}, "ServiceProviderCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "ServiceTypeCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "TargetElaspedCannotBeZero", $.String);

    $.Property({Static:true , Public:false}, "TitleCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "ValidateBackBufferDimsFullScreen", $.String);

    $.Property({Static:true , Public:false}, "ValidateBackBufferDimsModeFullScreen", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0"]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"));

})();

/* class Microsoft.Xna.Framework.WindowsGameHost */ 

(function WindowsGameHost$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Xna.Framework.GameHost"), 
      Name: "Microsoft.Xna.Framework.WindowsGameHost", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Xna.Framework.Game")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplicationIdle", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Exit", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowActivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowDeactivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowResume", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GameWindowSuspend", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Window", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentThread", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessAffinityMask", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.UIntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.UIntPtr")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LockThreadToProcessor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RunOneFrame", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetThreadAffinityMask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.UIntPtr"), [$asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.UIntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShowMissingRequirementMessage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartGameLoop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "game", $asm03.TypeRef("Microsoft.Xna.Framework.Game")); 
    $.Field({Static:false, Public:false}, "gameWindow", $asm03.TypeRef("Microsoft.Xna.Framework.WindowsGameWindow")); 
    $.Field({Static:false, Public:false}, "doneRun", $.Boolean); 
    $.Field({Static:false, Public:false}, "exitRequested", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "Window", $asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.WindowsGameWindow */ 

(function WindowsGameWindow$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Xna.Framework.GameWindow"), 
      Name: "Microsoft.Xna.Framework.WindowsGameWindow", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Resume", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_Suspend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginScreenDeviceChange", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeviceNameFromScreen", 
      new JSIL.MethodSignature($.String, [$asm0E.TypeRef("System.Windows.Forms.Screen")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndScreenDeviceChange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindFirstIcon", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Drawing.Icon"), [$asm07.TypeRef("System.Reflection.Assembly")], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AllowUserResizing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClientBounds", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentOrientation", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Form", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Windows.Forms.Form"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Handle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsMinimized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsMouseVisible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ScreenDeviceName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyTitle", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultIcon", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Drawing.Icon"), [], [])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultTitleName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_ApplicationActivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_ApplicationDeactivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_Closing", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("System.ComponentModel.CancelEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_Paint", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("System.Windows.Forms.PaintEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_Resume", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_ScreenChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_Suspend", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "mainForm_UserResized", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnResume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSuspend", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Resume", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_Suspend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScreenFromAdapter", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Windows.Forms.Screen"), [$asm05.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScreenFromDeviceName", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Windows.Forms.Screen"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScreenFromHandle", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Windows.Forms.Screen"), [$asm07.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AllowUserResizing", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGuideVisible", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsMouseVisible", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetSupportedOrientations", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetTitle", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Tick", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "isMouseVisible", $.Boolean); 
    $.Field({Static:false, Public:false}, "isGuideVisible", $.Boolean); 
    $.Field({Static:false, Public:false}, "inDeviceTransition", $.Boolean); 
    $.Field({Static:false, Public:false}, "pendingException", $asm07.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "Suspend", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Resume", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $asm07.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true , Virtual:true }, "AllowUserResizing", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsMouseVisible", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGuideVisible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ClientBounds", $asm02.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentOrientation", $asm02.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true , Virtual:true }, "ScreenDeviceName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsMinimized", $.Boolean);

    $.Property({Static:false, Public:false}, "Form", $asm0E.TypeRef("System.Windows.Forms.Form"));

    $.Event({Static:false, Public:false}, "Suspend", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:false}, "Resume", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

